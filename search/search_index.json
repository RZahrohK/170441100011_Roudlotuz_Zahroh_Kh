{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"algoritma/","text":"Dataset NSL-KDD \u00b6 NSL-KDD adalah dataset yang berisi data koneksi normal maupun data koneksi serangan hacker dalam sebuah jaringan. Dataset ini merupakan penyempurnaan dari KDD'99. Dataset ini disediakan oleh University of New Brunswick. Kelebihan \u00b6 Kelebihan NSL-KDD dibanding KDD'99 adalah: Tidak memiliki data redundan Hanya menggunakan atribut yang relevan Sebaran jenis koneksi normal dan serangan proporsional Jumlah data yang lebih rasional Berikut adalah detil dari dataset NSL-KDD","title":"Dataset NSL-KDD"},{"location":"algoritma/#dataset-nsl-kdd","text":"NSL-KDD adalah dataset yang berisi data koneksi normal maupun data koneksi serangan hacker dalam sebuah jaringan. Dataset ini merupakan penyempurnaan dari KDD'99. Dataset ini disediakan oleh University of New Brunswick.","title":"Dataset NSL-KDD"},{"location":"algoritma/#kelebihan","text":"Kelebihan NSL-KDD dibanding KDD'99 adalah: Tidak memiliki data redundan Hanya menggunakan atribut yang relevan Sebaran jenis koneksi normal dan serangan proporsional Jumlah data yang lebih rasional Berikut adalah detil dari dataset NSL-KDD","title":"Kelebihan"},{"location":"dt/","text":"Pengertian \u00b6 Decision tree adalah salah satu metode klasifikasi yang paling populer, karena mudah untuk diinterpretasi oleh manusia. Decision tree adalah model prediksi menggunakan struktur pohon atau struktur berhirarki. Konsep dari pohon keputusan adalah mengubah data menjadi decision tree dan aturan-aturan keputusan. Manfaat utama dari penggunaan decision tree adalah kemampuannya untuk mem-break down proses pengambilan keputusan yang kompleks menjadi lebih simple, sehingga pengambil keputusan akan lebih menginterpretasikan solusi dari permasalahan. Decision tree juga berguna untuk mengeksplorasi data, menemukan hubungan tersembunyi antara sejumlah calon variabel input dengan sebuah variabel target. Decision tree memadukan antara eksplorasi data dan pemodelan, sehingga sangat bagus sebagai langkah awal dalam proses pemodelan bahkan ketika dijadikan sebagai model akhir dari beberapa teknik lain. Dalam beberapa aplikasi, akurasi dari sebuah klasifikasi atau prediksi adalah satu-satunya hal yang ditonjolkan dalam metode ini, misalnya sebuah perusahaan direct mail membuat sebuah model yang akurat untuk memprediksi anggota mana yang berpotensi untuk merespon permintaan, tanpa memperhatikan bagaimana atau mengapa model tersebut bekerja. Algoritma \u00b6 Langkah-langkah dalam algotima KNN adalah Secara umum algoritma membangun Decision Tree adalah Pilih fitur sebagai root Buat cabang untuk masing-masing nilai Bagi kasus dalam cabang","title":"Pengertian"},{"location":"dt/#pengertian","text":"Decision tree adalah salah satu metode klasifikasi yang paling populer, karena mudah untuk diinterpretasi oleh manusia. Decision tree adalah model prediksi menggunakan struktur pohon atau struktur berhirarki. Konsep dari pohon keputusan adalah mengubah data menjadi decision tree dan aturan-aturan keputusan. Manfaat utama dari penggunaan decision tree adalah kemampuannya untuk mem-break down proses pengambilan keputusan yang kompleks menjadi lebih simple, sehingga pengambil keputusan akan lebih menginterpretasikan solusi dari permasalahan. Decision tree juga berguna untuk mengeksplorasi data, menemukan hubungan tersembunyi antara sejumlah calon variabel input dengan sebuah variabel target. Decision tree memadukan antara eksplorasi data dan pemodelan, sehingga sangat bagus sebagai langkah awal dalam proses pemodelan bahkan ketika dijadikan sebagai model akhir dari beberapa teknik lain. Dalam beberapa aplikasi, akurasi dari sebuah klasifikasi atau prediksi adalah satu-satunya hal yang ditonjolkan dalam metode ini, misalnya sebuah perusahaan direct mail membuat sebuah model yang akurat untuk memprediksi anggota mana yang berpotensi untuk merespon permintaan, tanpa memperhatikan bagaimana atau mengapa model tersebut bekerja.","title":"Pengertian"},{"location":"dt/#algoritma","text":"Langkah-langkah dalam algotima KNN adalah Secara umum algoritma membangun Decision Tree adalah Pilih fitur sebagai root Buat cabang untuk masing-masing nilai Bagi kasus dalam cabang","title":"Algoritma"},{"location":"ids/","text":"Pengertian \u00b6 Intrusion Detection System (disingkat IDS) adalah sebuah metode yang dapat digunakan untuk mendeteksi aktivitas yang mencurigakan dalam sebuah sistem atau jaringan. IDS dapat melakukan inspeksi terhadap lalu lintas inbound dan outbound dalam sebuah sistem atau jaringan, melakukan analisis dan mencari bukti dari percobaan intrusi (penyusupan). Cara Kerja \u00b6 Ada beberapa cara bagaimana IDS bekerja. Cara yang paling populer adalah dengan menggunakan pendeteksian berbasis signature (seperti halnya yang dilakukan oleh beberapa antivirus), yang melibatkan pencocokan lalu lintas jaringan dengan basis data yang berisi cara-cara serangan dan penyusupan yang sering dilakukan oleh penyerang. Sama seperti halnya antivirus, jenis ini membutuhkan pembaruan terhadap basis data signature IDS yang bersangkutan. Metode selanjutnya adalah dengan mendeteksi adanya anomali, yang disebut sebagai Anomaly-based IDS. Jenis ini melibatkan pola lalu lintas yang mungkin merupakan sebuah serangan yang sedang dilakukan oleh penyerang. Umumnya, dilakukan dengan menggunakan teknik statistik untuk membandingkan lalu lintas yang sedang dipantau dengan lalu lintas normal yang biasa terjadi. Metode ini menawarkan kelebihan dibandingkan signature-based IDS, yakni ia dapat mendeteksi bentuk serangan yang baru dan belum terdapat di dalam basis data signature IDS. Kelemahannya, adalah jenis ini sering mengeluarkan pesan false positive. Sehingga tugas administrator menjadi lebih rumit, dengan harus memilah-milah mana yang merupakan serangan yang sebenarnya dari banyaknya laporan false positive yang muncul. Teknik lainnya yang digunakan adalah dengan memantau berkas-berkas sistem operasi, yakni dengan cara melihat apakah ada percobaan untuk mengubah beberapa berkas sistem operasi, utamanya berkas log. Teknik ini seringnya diimplementasikan di dalam HIDS, selain tentunya melakukan pemindaian terhadap log sistem untuk memantau apakah terjadi kejadian yang tidak biasa.","title":"Ids"},{"location":"ids/#pengertian","text":"Intrusion Detection System (disingkat IDS) adalah sebuah metode yang dapat digunakan untuk mendeteksi aktivitas yang mencurigakan dalam sebuah sistem atau jaringan. IDS dapat melakukan inspeksi terhadap lalu lintas inbound dan outbound dalam sebuah sistem atau jaringan, melakukan analisis dan mencari bukti dari percobaan intrusi (penyusupan).","title":"Pengertian"},{"location":"ids/#cara-kerja","text":"Ada beberapa cara bagaimana IDS bekerja. Cara yang paling populer adalah dengan menggunakan pendeteksian berbasis signature (seperti halnya yang dilakukan oleh beberapa antivirus), yang melibatkan pencocokan lalu lintas jaringan dengan basis data yang berisi cara-cara serangan dan penyusupan yang sering dilakukan oleh penyerang. Sama seperti halnya antivirus, jenis ini membutuhkan pembaruan terhadap basis data signature IDS yang bersangkutan. Metode selanjutnya adalah dengan mendeteksi adanya anomali, yang disebut sebagai Anomaly-based IDS. Jenis ini melibatkan pola lalu lintas yang mungkin merupakan sebuah serangan yang sedang dilakukan oleh penyerang. Umumnya, dilakukan dengan menggunakan teknik statistik untuk membandingkan lalu lintas yang sedang dipantau dengan lalu lintas normal yang biasa terjadi. Metode ini menawarkan kelebihan dibandingkan signature-based IDS, yakni ia dapat mendeteksi bentuk serangan yang baru dan belum terdapat di dalam basis data signature IDS. Kelemahannya, adalah jenis ini sering mengeluarkan pesan false positive. Sehingga tugas administrator menjadi lebih rumit, dengan harus memilah-milah mana yang merupakan serangan yang sebenarnya dari banyaknya laporan false positive yang muncul. Teknik lainnya yang digunakan adalah dengan memantau berkas-berkas sistem operasi, yakni dengan cara melihat apakah ada percobaan untuk mengubah beberapa berkas sistem operasi, utamanya berkas log. Teknik ini seringnya diimplementasikan di dalam HIDS, selain tentunya melakukan pemindaian terhadap log sistem untuk memantau apakah terjadi kejadian yang tidak biasa.","title":"Cara Kerja"},{"location":"implementasi/","text":"Implementasi \u00b6 Package Requirement \u00b6 Penelitian ini menggunakan Scikit-learn untuk mengolah dan menganalisis data. Didalam scikit juga telah terdapat berbagai algoritma analisis data yang dapat digunakan tanpa harus menulis source code dari awal. Untuk menggunakan Scikit-learn kita harus menginstall software berikut. Python (>= 3.5) NumPy (>= 1.11.0) SciPy (>= 0.17.0) joblib (>= 0.11) Matplotlib (>= 1.5.1) Pandas (>= 0.18.0) Package Installation \u00b6 Untuk menginstall package tersebut kita bisa menggunakan perintah pip. Sebagai catatan, instalasi package tersebut membutuhkan koneksi internet pip install numpy,scipy,joblib,matplotlib,pandas Coding \u00b6 Setelah proses instalasi selesai kita bisa mengimport library-library tersebut dari python kita. import numpy as np import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier import pandas as pd Selanjutnya kita dapat memasukkan data set berupa file csv lokasi_file=input(\"Masukkan lokasi file data training : \") data_train= pd.read_csv(lokasi_file) Data dalam dataset terbagi atas atribut fitur dan atribut target. Dalam dataset NSL-KDD atribut target adalah atribut'status' sedangkan fitur adalah atribut selain 'status'. Nantinya atribut fitur akan digunakan untuk memprediksi nilai dari atribut target. Untuk itu dalam source code kita harus disertakan kode untuk membagi data dalam dataset kedalam atribut fitur dan atribut target, serta kode untuk mengambil nama kolom atribut. #Mengambil dataset dari atribut selain status sebagai data atribut fitur #dan dari data status sebagai atribut target x,y = data_train.loc[:,data_train.columns != 'status'], data_train.loc[:,'status'] #Mengambil data kolom atiribut fitur col=data_train.columns.tolist() col.remove('status') Selanjutnya kita akan membangun KNN Classifier dengan N 1- masukan pengguna. Pada bagian ini juga dilakukan pre-processing data berupa encoding dengan metode one hot encoding seperti dijelaskan pada bagian metode penelitian. Variable x akan berisi data dari atribut fitur sedangkan y akan berisi data dari atribut target. #Membangun KNN Classifier dengan n mulai dari 1 hingga - n sesuai masukan pengguna n=input(\"Masukkan nilai N maksimal yang anda inginkan\") knn = KNeighborsClassifier(n_neighbors = n) #Melakukan enccoding pada atribut yang berisi string. x=pd.get_dummies(x, columns=col) y=pd.get_dummies(y, columns=['status']) Setelah pre-processing, tahap berikutnya adalah pengujian. Pada tahap ini 80% dataset akan digunakan sebagai data training dan 20% sebagai data uji. Nantinya akan dihitung berapa persen akurasinya untuk masing masing nilai K. # membangun traning set, dimana 80% utk training dan 20% utk testing x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2) neig = np.arange(1,n) train_accuracy = [] test_accuracy = [] for i, k in enumerate (neig): knn = KNeighborsClassifier(n_neighbors = k) knn.fit(x_train,y_train) train_accuracy.append(knn.score(x_train,y_train)) test_accuracy.append(knn.score(x_test,y_test)) Visualiasi Hasil \u00b6 Dan pada akhirnya hasil pengujian tersebut ditampilkan dalam bentuk grafik agar mudah dimengerti # Plot plt.figure(figsize=(13,8)) plt.plot(neig, test_accuracy, label = 'Akurasi IDS berbasis KNN') plt.legend() plt.title('AKURASI') plt.xlabel('Jumlah K') plt.ylabel('Akurasi')","title":"Implementasi"},{"location":"implementasi/#implementasi","text":"","title":"Implementasi"},{"location":"implementasi/#package-requirement","text":"Penelitian ini menggunakan Scikit-learn untuk mengolah dan menganalisis data. Didalam scikit juga telah terdapat berbagai algoritma analisis data yang dapat digunakan tanpa harus menulis source code dari awal. Untuk menggunakan Scikit-learn kita harus menginstall software berikut. Python (>= 3.5) NumPy (>= 1.11.0) SciPy (>= 0.17.0) joblib (>= 0.11) Matplotlib (>= 1.5.1) Pandas (>= 0.18.0)","title":"Package Requirement"},{"location":"implementasi/#package-installation","text":"Untuk menginstall package tersebut kita bisa menggunakan perintah pip. Sebagai catatan, instalasi package tersebut membutuhkan koneksi internet pip install numpy,scipy,joblib,matplotlib,pandas","title":"Package Installation"},{"location":"implementasi/#coding","text":"Setelah proses instalasi selesai kita bisa mengimport library-library tersebut dari python kita. import numpy as np import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier import pandas as pd Selanjutnya kita dapat memasukkan data set berupa file csv lokasi_file=input(\"Masukkan lokasi file data training : \") data_train= pd.read_csv(lokasi_file) Data dalam dataset terbagi atas atribut fitur dan atribut target. Dalam dataset NSL-KDD atribut target adalah atribut'status' sedangkan fitur adalah atribut selain 'status'. Nantinya atribut fitur akan digunakan untuk memprediksi nilai dari atribut target. Untuk itu dalam source code kita harus disertakan kode untuk membagi data dalam dataset kedalam atribut fitur dan atribut target, serta kode untuk mengambil nama kolom atribut. #Mengambil dataset dari atribut selain status sebagai data atribut fitur #dan dari data status sebagai atribut target x,y = data_train.loc[:,data_train.columns != 'status'], data_train.loc[:,'status'] #Mengambil data kolom atiribut fitur col=data_train.columns.tolist() col.remove('status') Selanjutnya kita akan membangun KNN Classifier dengan N 1- masukan pengguna. Pada bagian ini juga dilakukan pre-processing data berupa encoding dengan metode one hot encoding seperti dijelaskan pada bagian metode penelitian. Variable x akan berisi data dari atribut fitur sedangkan y akan berisi data dari atribut target. #Membangun KNN Classifier dengan n mulai dari 1 hingga - n sesuai masukan pengguna n=input(\"Masukkan nilai N maksimal yang anda inginkan\") knn = KNeighborsClassifier(n_neighbors = n) #Melakukan enccoding pada atribut yang berisi string. x=pd.get_dummies(x, columns=col) y=pd.get_dummies(y, columns=['status']) Setelah pre-processing, tahap berikutnya adalah pengujian. Pada tahap ini 80% dataset akan digunakan sebagai data training dan 20% sebagai data uji. Nantinya akan dihitung berapa persen akurasinya untuk masing masing nilai K. # membangun traning set, dimana 80% utk training dan 20% utk testing x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2) neig = np.arange(1,n) train_accuracy = [] test_accuracy = [] for i, k in enumerate (neig): knn = KNeighborsClassifier(n_neighbors = k) knn.fit(x_train,y_train) train_accuracy.append(knn.score(x_train,y_train)) test_accuracy.append(knn.score(x_test,y_test))","title":"Coding"},{"location":"implementasi/#visualiasi-hasil","text":"Dan pada akhirnya hasil pengujian tersebut ditampilkan dalam bentuk grafik agar mudah dimengerti # Plot plt.figure(figsize=(13,8)) plt.plot(neig, test_accuracy, label = 'Akurasi IDS berbasis KNN') plt.legend() plt.title('AKURASI') plt.xlabel('Jumlah K') plt.ylabel('Akurasi')","title":"Visualiasi Hasil"},{"location":"implementasidt/","text":"Implementasi \u00b6 Package Requirement \u00b6 Penelitian ini menggunakan Scikit-learn untuk mengolah dan menganalisis data. Didalam scikit juga telah terdapat berbagai algoritma analisis data yang dapat digunakan tanpa harus menulis source code dari awal. Untuk menggunakan Scikit-learn kita harus menginstall software berikut. Python (>= 3.5) NumPy (>= 1.11.0) SciPy (>= 0.17.0) joblib (>= 0.11) Matplotlib (>= 1.5.1) Pandas (>= 0.18.0) Package Installation \u00b6 Untuk menginstall package tersebut kita bisa menggunakan perintah pip. Sebagai catatan, instalasi package tersebut membutuhkan koneksi internet pip install numpy,scipy,joblib,matplotlib,pandas Coding \u00b6 Setelah proses instalasi selesai kita bisa mengimport library-library tersebut dari python kita. import numpy as np import matplotlib.pyplot as plt from sklearn import preprocessing from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation from sklearn.model_selection import train_test_split import pandas as pd Selanjutnya kita dapat memasukkan data set berupa file csv lokasi_file=input(\"Masukkan lokasi file data training : \") data_train= pd.read_csv(lokasi_file) Data dalam dataset terbagi atas atribut fitur dan atribut target. Dalam dataset NSL-KDD atribut target adalah atribut'status' sedangkan fitur adalah atribut selain 'status'. Nantinya atribut fitur akan digunakan untuk memprediksi nilai dari atribut target. Untuk itu dalam source code kita harus disertakan kode untuk membagi data dalam dataset kedalam atribut fitur dan atribut target, serta kode untuk mengambil nama kolom atribut. #Mengambil dataset dari atribut selain status sebagai data atribut fitur #dan dari data status sebagai atribut target x,y = data_train.loc[:,data_train.columns != 'status'], data_train.loc[:,'status'] #Mengambil data kolom atiribut fitur col=data_train.columns.tolist() col.remove('status') Selanjutnya dilakukan pre-processing data berupa encoding dengan metode one hot encoding seperti dijelaskan pada bagian metode penelitian. Variable x akan berisi data dari atribut fitur sedangkan y akan berisi data dari atribut target. #Melakukan enccoding pada atribut yang berisi string. x=pd.get_dummies(x, columns=col) y=pd.get_dummies(y, columns=['status']) Setelah pre-processing, tahap berikutnya adalah pengujian. Pada tahap ini 80% dataset akan digunakan sebagai data training dan 20% sebagai data uji. # membangun traning set, dimana 80% utk training dan 20% utk testing x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2) Pembangunan Model, Pengujian dan Visualiasi Hasil \u00b6 Dan pada akhirnya hasil pengujian tersebut ditampilkan dalam bentuk grafik agar sebuah model Decision Tree akan dibangun di traning dan diuji dengan data yang telah disiapkan. Hasil akurasi akan ditampilkan untuk mengetahui efektifitas dari model. Tampak bahwa model ini mampu mendeteksi 94% serangan dengan tepat # Membangun desision tree classifier clf = DecisionTreeClassifier() # Melakukan traning clf = clf.fit(x_train,y_train) #Melakukan pengujian dan menampilkan akurasi y_pred = clf.predict(x_test) print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","title":"Implementasi"},{"location":"implementasidt/#implementasi","text":"","title":"Implementasi"},{"location":"implementasidt/#package-requirement","text":"Penelitian ini menggunakan Scikit-learn untuk mengolah dan menganalisis data. Didalam scikit juga telah terdapat berbagai algoritma analisis data yang dapat digunakan tanpa harus menulis source code dari awal. Untuk menggunakan Scikit-learn kita harus menginstall software berikut. Python (>= 3.5) NumPy (>= 1.11.0) SciPy (>= 0.17.0) joblib (>= 0.11) Matplotlib (>= 1.5.1) Pandas (>= 0.18.0)","title":"Package Requirement"},{"location":"implementasidt/#package-installation","text":"Untuk menginstall package tersebut kita bisa menggunakan perintah pip. Sebagai catatan, instalasi package tersebut membutuhkan koneksi internet pip install numpy,scipy,joblib,matplotlib,pandas","title":"Package Installation"},{"location":"implementasidt/#coding","text":"Setelah proses instalasi selesai kita bisa mengimport library-library tersebut dari python kita. import numpy as np import matplotlib.pyplot as plt from sklearn import preprocessing from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation from sklearn.model_selection import train_test_split import pandas as pd Selanjutnya kita dapat memasukkan data set berupa file csv lokasi_file=input(\"Masukkan lokasi file data training : \") data_train= pd.read_csv(lokasi_file) Data dalam dataset terbagi atas atribut fitur dan atribut target. Dalam dataset NSL-KDD atribut target adalah atribut'status' sedangkan fitur adalah atribut selain 'status'. Nantinya atribut fitur akan digunakan untuk memprediksi nilai dari atribut target. Untuk itu dalam source code kita harus disertakan kode untuk membagi data dalam dataset kedalam atribut fitur dan atribut target, serta kode untuk mengambil nama kolom atribut. #Mengambil dataset dari atribut selain status sebagai data atribut fitur #dan dari data status sebagai atribut target x,y = data_train.loc[:,data_train.columns != 'status'], data_train.loc[:,'status'] #Mengambil data kolom atiribut fitur col=data_train.columns.tolist() col.remove('status') Selanjutnya dilakukan pre-processing data berupa encoding dengan metode one hot encoding seperti dijelaskan pada bagian metode penelitian. Variable x akan berisi data dari atribut fitur sedangkan y akan berisi data dari atribut target. #Melakukan enccoding pada atribut yang berisi string. x=pd.get_dummies(x, columns=col) y=pd.get_dummies(y, columns=['status']) Setelah pre-processing, tahap berikutnya adalah pengujian. Pada tahap ini 80% dataset akan digunakan sebagai data training dan 20% sebagai data uji. # membangun traning set, dimana 80% utk training dan 20% utk testing x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2)","title":"Coding"},{"location":"implementasidt/#pembangunan-model-pengujian-dan-visualiasi-hasil","text":"Dan pada akhirnya hasil pengujian tersebut ditampilkan dalam bentuk grafik agar sebuah model Decision Tree akan dibangun di traning dan diuji dengan data yang telah disiapkan. Hasil akurasi akan ditampilkan untuk mengetahui efektifitas dari model. Tampak bahwa model ini mampu mendeteksi 94% serangan dengan tepat # Membangun desision tree classifier clf = DecisionTreeClassifier() # Melakukan traning clf = clf.fit(x_train,y_train) #Melakukan pengujian dan menampilkan akurasi y_pred = clf.predict(x_test) print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","title":"Pembangunan Model, Pengujian dan Visualiasi Hasil"},{"location":"kelebihan_kekurangan/","text":"Kelebihan dan Kekurangan KNN \u00b6 Kelebihan \u00b6 Lebih efektif di data yang besar. Dapat menghasilkan data yang lebih akurat. Kekurangan \u00b6 Perlu untuk menentukan nilai k yang optimal sehingga untuk menyatakan jumlah tatangga terdekatnya lebih mudah. Biaya komputasi yang cukup tinggi karena perhitungan jarak harus dilakukan pada setiap querry instance.","title":"Kelebihan Kekurangan"},{"location":"kelebihan_kekurangan/#kelebihan-dan-kekurangan-knn","text":"","title":"Kelebihan dan Kekurangan KNN"},{"location":"kelebihan_kekurangan/#kelebihan","text":"Lebih efektif di data yang besar. Dapat menghasilkan data yang lebih akurat.","title":"Kelebihan"},{"location":"kelebihan_kekurangan/#kekurangan","text":"Perlu untuk menentukan nilai k yang optimal sehingga untuk menyatakan jumlah tatangga terdekatnya lebih mudah. Biaya komputasi yang cukup tinggi karena perhitungan jarak harus dilakukan pada setiap querry instance.","title":"Kekurangan"},{"location":"kelebihan_kekurangandt/","text":"Kelebihan \u00b6 Kelebihan Decision Tree Kelebihan dari metode decision tree adalah: Daerah pengambilan keputusan yang sebelumnya kompleks dan sangat global, dapat diubah menjadi lebih simpel dan spesifik. Eliminasi perhitungan-perhitungan yang tidak diperlukan, karena ketika menggunakan metode decision tree maka sample diuji hanya berdasarkan kriteria atau kelas tertentu. Fleksibel untuk memilih fitur dari internal node yang berbeda, fitur yang terpilih akan membedakan suatu kriteria dibandingkan kriteria yang lain dalam nodeyang sama. Kefleksibelan metode decision tree ini meningkatkan kualitas keputusan yang dihasilkan jika dibandingkan ketika menggunakan metode penghitungan satu tahap yang lebih konvensional. Dalam analisis multivariat, dengan kriteria dan kelas yang jumlahnya sangat banyak, seorang penguji biasanya perlu untuk mengestimasikan baik itu distribusi dimensi tinggi ataupun parameter tertentu dari distribusi kelas tersebut. Metode decision tree dapat menghindari munculnya permasalahan ini dengan menggunakan criteria yang jumlahnya lebih sedikit pada setiap nodeinternal tanpa banyak mengurangi kualitas keputusan yang dihasilkan. Kekurangan \u00b6 Beberapa kekurangan pada decision tree yaitu : Terjadi overlap terutama ketika kelas-kelas dan criteria yang digunakan jumlahnya sangat banyak. Hal tersebut juga dapat menyebabkan meningkatnya waktu pengambilan keputusan dan jumlah memori yang diperlukan. Pengakumulasian jumlah eror dari setiap tingkat dalam sebuah decision tree yang besar. Kesulitan dalam mendesain decision tree yang optimal. Hasil kualitas keputusan yang didapatkan dari metode decision tree sangat tergantung pada bagaimana pohon tersebut didesain.","title":"Kelebihan Kekurangan"},{"location":"kelebihan_kekurangandt/#kelebihan","text":"Kelebihan Decision Tree Kelebihan dari metode decision tree adalah: Daerah pengambilan keputusan yang sebelumnya kompleks dan sangat global, dapat diubah menjadi lebih simpel dan spesifik. Eliminasi perhitungan-perhitungan yang tidak diperlukan, karena ketika menggunakan metode decision tree maka sample diuji hanya berdasarkan kriteria atau kelas tertentu. Fleksibel untuk memilih fitur dari internal node yang berbeda, fitur yang terpilih akan membedakan suatu kriteria dibandingkan kriteria yang lain dalam nodeyang sama. Kefleksibelan metode decision tree ini meningkatkan kualitas keputusan yang dihasilkan jika dibandingkan ketika menggunakan metode penghitungan satu tahap yang lebih konvensional. Dalam analisis multivariat, dengan kriteria dan kelas yang jumlahnya sangat banyak, seorang penguji biasanya perlu untuk mengestimasikan baik itu distribusi dimensi tinggi ataupun parameter tertentu dari distribusi kelas tersebut. Metode decision tree dapat menghindari munculnya permasalahan ini dengan menggunakan criteria yang jumlahnya lebih sedikit pada setiap nodeinternal tanpa banyak mengurangi kualitas keputusan yang dihasilkan.","title":"Kelebihan"},{"location":"kelebihan_kekurangandt/#kekurangan","text":"Beberapa kekurangan pada decision tree yaitu : Terjadi overlap terutama ketika kelas-kelas dan criteria yang digunakan jumlahnya sangat banyak. Hal tersebut juga dapat menyebabkan meningkatnya waktu pengambilan keputusan dan jumlah memori yang diperlukan. Pengakumulasian jumlah eror dari setiap tingkat dalam sebuah decision tree yang besar. Kesulitan dalam mendesain decision tree yang optimal. Hasil kualitas keputusan yang didapatkan dari metode decision tree sangat tergantung pada bagaimana pohon tersebut didesain.","title":"Kekurangan"},{"location":"kesimpulan/","text":"Kesimpulan \u00b6 Penggunan algoritma KNN dalam IDS menghasilkan akurasi yang bagus yaitu sekitar 96% Dari hasil pengujian tampak bahwa akurasi terbesar terjadi saat nilai K adalah 1","title":"Kesimpulan"},{"location":"kesimpulan/#kesimpulan","text":"Penggunan algoritma KNN dalam IDS menghasilkan akurasi yang bagus yaitu sekitar 96% Dari hasil pengujian tampak bahwa akurasi terbesar terjadi saat nilai K adalah 1","title":"Kesimpulan"},{"location":"kesimpulandt/","text":"Kesimpulan \u00b6 Decision Tree digunakan untuk membuat klasifikasi berdasarkan data yang telah diketahui Klasifikasi dilakukan dengan mengevaluasi nilai atribut secara berurutan Urutan atribut yang dievaluasi dilakukan berdasarkan nilai information gain Infomrmation gain menggambarkan seberapa penting atribut dalam proses klasifikasi Penggunan algoritma Decision dalam IDS menghasilkan akurasi yang bagus yaitu sekitar 94%","title":"Kesimpulan"},{"location":"kesimpulandt/#kesimpulan","text":"Decision Tree digunakan untuk membuat klasifikasi berdasarkan data yang telah diketahui Klasifikasi dilakukan dengan mengevaluasi nilai atribut secara berurutan Urutan atribut yang dievaluasi dilakukan berdasarkan nilai information gain Infomrmation gain menggambarkan seberapa penting atribut dalam proses klasifikasi Penggunan algoritma Decision dalam IDS menghasilkan akurasi yang bagus yaitu sekitar 94%","title":"Kesimpulan"},{"location":"knn/","text":"Sekilas Tentang Algortima K-Nearset Neighbor \u00b6 Algoritma k-nearest neighbor (KNN) adalah sebuah metode untuk melakukan klasifikasi terhadap objek yang berdasarkan dari data pembelajaran yang jaraknya paling dekat dengan objek tersebut. KNN meupakan algoritma supervised learning dimana hasil dari query instance yang baru diklasifikan berdasarkan mayoritas dari kategori pada algoritma KNN. Dimana kelas yang paling banyak muncul yang nantinya akan menjadi kelas hasil dari klasifikasi. Tujuan algoritma ini adalah mengklasifikasikan obyek baru berdasarkan atribut dan training sample. Didalam classifier tidak menggunakan model apapun untuk dicocokkan dan hanya berdasarkan pada suatu memori. Titik query, akan ditemukan sejumlah K obyek atau (titik training) yang paling dekat dengan titik query. Algoritma k-nearest neighbor (KNN) menggunakan klasifikasi ketetanggaan sebagai nilai prediksi dari query instance yang baru. Algoritma metode k-nearest neighbor (KNN) sangatlah sederhana, bekerja berdasarkan jarak terpendek dari query instance ke training sample untuk menentukan KNN-nya. Training sample diproyeksikan ke ruang berdimensi banyak, dimana masing-masing dimensi merepresentasikan fitur dari data. Ruang ini dibagi menjadi bagian-bagian berdasarkan klasifikasi training sample. Sebuah titik pada ruang ini ditandai oleh kelas jika kelas C merupakan klasifikasi yang paling banyak ditemui pada K (tetangga terdekat dari titik tersebut). Dekat atau jauhnya tetangga biasanya dihitung berdasarkan Euclidean Distance . Jarak Euclidean paling sering digunakan menghitung suatu jarak. Dimana jarak euclidean memiliki fungsi untuk menguji ukuran yang bisa digunakan sebagai interpretasikedekatan jarak antara dua obyek. Algoritma \u00b6 Langkah-langkah dalam algotima KNN adalah Tentukan parameter K ( jumlah tetangga terdekat) Hitung Kuadrat Eulid masing-masing objek terhadap data sample Urutkan objek kedalam kelompopk yang memilki jarak terdekat","title":"Pengertian"},{"location":"knn/#sekilas-tentang-algortima-k-nearset-neighbor","text":"Algoritma k-nearest neighbor (KNN) adalah sebuah metode untuk melakukan klasifikasi terhadap objek yang berdasarkan dari data pembelajaran yang jaraknya paling dekat dengan objek tersebut. KNN meupakan algoritma supervised learning dimana hasil dari query instance yang baru diklasifikan berdasarkan mayoritas dari kategori pada algoritma KNN. Dimana kelas yang paling banyak muncul yang nantinya akan menjadi kelas hasil dari klasifikasi. Tujuan algoritma ini adalah mengklasifikasikan obyek baru berdasarkan atribut dan training sample. Didalam classifier tidak menggunakan model apapun untuk dicocokkan dan hanya berdasarkan pada suatu memori. Titik query, akan ditemukan sejumlah K obyek atau (titik training) yang paling dekat dengan titik query. Algoritma k-nearest neighbor (KNN) menggunakan klasifikasi ketetanggaan sebagai nilai prediksi dari query instance yang baru. Algoritma metode k-nearest neighbor (KNN) sangatlah sederhana, bekerja berdasarkan jarak terpendek dari query instance ke training sample untuk menentukan KNN-nya. Training sample diproyeksikan ke ruang berdimensi banyak, dimana masing-masing dimensi merepresentasikan fitur dari data. Ruang ini dibagi menjadi bagian-bagian berdasarkan klasifikasi training sample. Sebuah titik pada ruang ini ditandai oleh kelas jika kelas C merupakan klasifikasi yang paling banyak ditemui pada K (tetangga terdekat dari titik tersebut). Dekat atau jauhnya tetangga biasanya dihitung berdasarkan Euclidean Distance . Jarak Euclidean paling sering digunakan menghitung suatu jarak. Dimana jarak euclidean memiliki fungsi untuk menguji ukuran yang bisa digunakan sebagai interpretasikedekatan jarak antara dua obyek.","title":"Sekilas Tentang Algortima K-Nearset Neighbor"},{"location":"knn/#algoritma","text":"Langkah-langkah dalam algotima KNN adalah Tentukan parameter K ( jumlah tetangga terdekat) Hitung Kuadrat Eulid masing-masing objek terhadap data sample Urutkan objek kedalam kelompopk yang memilki jarak terdekat","title":"Algoritma"},{"location":"metpen/","text":"Tahapan-tahapan yang dilalui dalam penelitian ini adalah Data Pre-processing \u00b6 Data-preprocessing bertujuan untuk memperbaiki kualitas data dengan mengubah format data sehingga siap digunakan oleh KNN Classifier. Pada NSL_KDD terdapat beberapa atribut yang berisi string, sedangkan KNN hanya memproses data berupa angka. Untuk itu atribut yang berupa string diubah menjadi angka menggunakan metode One Hot Encoder yang disediakan oleh pandas. Misal mula-mula terdapat data negara seperti dibawah ini. Setelah dilakukan perubahan dengan metode One Hot Encoder hasilnya adalah Data Training \u00b6 Data training dilakukan agar program dapat mengambil kesimpulan berdasarkan data yang telah ada.Data training harus dilakukan secara proporsional, jumlah data training yang terlalu sedikit menyebabkan akurasi berkurang, sebaliknya data traning yang terlalu banyak juga menyebabkan akurasi menurun akibat over-fitting dan waktu uji juga lebih lama. Dalam penelitian ini menggunakan split training dimana 80% data digunakan untuk training dan 20% untuk pengujian Pengujian \u00b6 Pengujian dilakukan untuk menilai akurasi algoritma Knn dalam mendeteksi serangan. Pengujian dilakukan dengan mengubah nilai K dan kemudian memperhatikan pengaruhnya terhadap nilai akurasi.","title":"Metode Penelitian"},{"location":"metpen/#data-pre-processing","text":"Data-preprocessing bertujuan untuk memperbaiki kualitas data dengan mengubah format data sehingga siap digunakan oleh KNN Classifier. Pada NSL_KDD terdapat beberapa atribut yang berisi string, sedangkan KNN hanya memproses data berupa angka. Untuk itu atribut yang berupa string diubah menjadi angka menggunakan metode One Hot Encoder yang disediakan oleh pandas. Misal mula-mula terdapat data negara seperti dibawah ini. Setelah dilakukan perubahan dengan metode One Hot Encoder hasilnya adalah","title":"Data Pre-processing"},{"location":"metpen/#data-training","text":"Data training dilakukan agar program dapat mengambil kesimpulan berdasarkan data yang telah ada.Data training harus dilakukan secara proporsional, jumlah data training yang terlalu sedikit menyebabkan akurasi berkurang, sebaliknya data traning yang terlalu banyak juga menyebabkan akurasi menurun akibat over-fitting dan waktu uji juga lebih lama. Dalam penelitian ini menggunakan split training dimana 80% data digunakan untuk training dan 20% untuk pengujian","title":"Data Training"},{"location":"metpen/#pengujian","text":"Pengujian dilakukan untuk menilai akurasi algoritma Knn dalam mendeteksi serangan. Pengujian dilakukan dengan mengubah nilai K dan kemudian memperhatikan pengaruhnya terhadap nilai akurasi.","title":"Pengujian"},{"location":"penyusun/","text":"Penyusun \u00b6 Biodata NIM : 170441100011 Nama : Roudlotuz Zahroh Khoiriyah Jurusan : Sistem Informasi Email : rzahrohkh@gmail.com","title":"penyusun"},{"location":"penyusun/#penyusun","text":"Biodata NIM : 170441100011 Nama : Roudlotuz Zahroh Khoiriyah Jurusan : Sistem Informasi Email : rzahrohkh@gmail.com","title":"Penyusun"},{"location":"referensi/","text":"Referensi \u00b6 [1] Y. Canbay and S. Sagiroglu, A hybrid method for intrusion detection, in Proceedings - 2015 IEEE 14 th International Conference on Machine Learning and Applications, ICMLA 2015, 2016, pp. 156 - 161. [2] A. Bode, K-Nearest Neighbor Dengan Feature Selection Menggunakan Backward Elimination Untuk Prediksi Harga Komoditi Kopi Arabika, Ilk. J. Ilm., vol. 9, no. 2, p. 188, 2018. [3] L. Dhanabal and D. S. P. Shantharajah, A Study On NSL-KDD Dataset For Intrusion Detection System Based On Classification Algorithms, Int. J. Adv. Res. Comput. Commun. Eng., vol. 4, no. 6, pp. 446 - 452, 2015.","title":"Referensi"},{"location":"referensi/#referensi","text":"[1] Y. Canbay and S. Sagiroglu, A hybrid method for intrusion detection, in Proceedings - 2015 IEEE 14 th International Conference on Machine Learning and Applications, ICMLA 2015, 2016, pp. 156 - 161. [2] A. Bode, K-Nearest Neighbor Dengan Feature Selection Menggunakan Backward Elimination Untuk Prediksi Harga Komoditi Kopi Arabika, Ilk. J. Ilm., vol. 9, no. 2, p. 188, 2018. [3] L. Dhanabal and D. S. P. Shantharajah, A Study On NSL-KDD Dataset For Intrusion Detection System Based On Classification Algorithms, Int. J. Adv. Res. Comput. Commun. Eng., vol. 4, no. 6, pp. 446 - 452, 2015.","title":"Referensi"},{"location":"referensidt/","text":"Referensi \u00b6 [1] S. M. Othman, F. M. Ba-Alwi, N. T. Alsohybe, and A. Y. Al-Hashida, \"Intrusion detection model using machine learning algorithm on Big Data environment,\" J. Big Data, vol. 5, no. 1, 2018. [2] W. Chen, F. Kong, F. Mei, G. Yuan, and B. Li, \"A Novel Unsupervised Anomaly Detection Approach for Intrusion Detection System,\" in Proceedings - 3 rd IEEE International Conference on Big Data Security on Cloud, BigDataSecurity 2017, 3 rd IEEE International Conference on High Performance and Smart Computing, HPSC 2017 and 2 nd IEEE International Conference on Intelligent Data and Securit, 2017, pp. 69 - 73. [3] J. Novakovi?, P. Strbac, and D. Bulatovi?, \"Toward optimal feature selection using ranking methods and classification algorithms,\" Yugosl. J. Oper. Res., vol. 21, no. 1, pp. 119 - 135, 2011. [4] Y. Canbay and S. Sagiroglu, \"A hybrid method for intrusion detection,\" in Proceedings - 2015 IEEE 14 th International Conference on Machine Learning and Applications, ICMLA 2015, 2016, pp. 156 - 161. [5] M. Almseidin, M. Alzubi, S. Kovacs, and M. Alkasassbeh, \"Evaluation of machine learning algorithms for Intrusion Detection System,\" in SISY 2017 - IEEE 15 th International Symposium on Intelligent Systems and Informatics, Proceedings, 2017, pp. 277 - 282. [6] O. Osanaiye, H. Cai, K. K. R. Choo, A. Dehghantanha, Z. Xu, and M. Dlodlo, \"Ensemble-based multi-filter feature selection method for DDoS detection in cloud computing,\" Eurasip J. Wirel. Commun. Netw., 2016. [7] L. Dhanabal and D. S. P. Shantharajah, \"A Study On NSL-KDD Dataset For Intrusion Detection System Based On Classification Algorithms,\" Int. J. Adv. Res. Comput. Commun. Eng., vol. 4, no. 6, pp. 446 - 452, 2015.","title":"Referensi"},{"location":"referensidt/#referensi","text":"[1] S. M. Othman, F. M. Ba-Alwi, N. T. Alsohybe, and A. Y. Al-Hashida, \"Intrusion detection model using machine learning algorithm on Big Data environment,\" J. Big Data, vol. 5, no. 1, 2018. [2] W. Chen, F. Kong, F. Mei, G. Yuan, and B. Li, \"A Novel Unsupervised Anomaly Detection Approach for Intrusion Detection System,\" in Proceedings - 3 rd IEEE International Conference on Big Data Security on Cloud, BigDataSecurity 2017, 3 rd IEEE International Conference on High Performance and Smart Computing, HPSC 2017 and 2 nd IEEE International Conference on Intelligent Data and Securit, 2017, pp. 69 - 73. [3] J. Novakovi?, P. Strbac, and D. Bulatovi?, \"Toward optimal feature selection using ranking methods and classification algorithms,\" Yugosl. J. Oper. Res., vol. 21, no. 1, pp. 119 - 135, 2011. [4] Y. Canbay and S. Sagiroglu, \"A hybrid method for intrusion detection,\" in Proceedings - 2015 IEEE 14 th International Conference on Machine Learning and Applications, ICMLA 2015, 2016, pp. 156 - 161. [5] M. Almseidin, M. Alzubi, S. Kovacs, and M. Alkasassbeh, \"Evaluation of machine learning algorithms for Intrusion Detection System,\" in SISY 2017 - IEEE 15 th International Symposium on Intelligent Systems and Informatics, Proceedings, 2017, pp. 277 - 282. [6] O. Osanaiye, H. Cai, K. K. R. Choo, A. Dehghantanha, Z. Xu, and M. Dlodlo, \"Ensemble-based multi-filter feature selection method for DDoS detection in cloud computing,\" Eurasip J. Wirel. Commun. Netw., 2016. [7] L. Dhanabal and D. S. P. Shantharajah, \"A Study On NSL-KDD Dataset For Intrusion Detection System Based On Classification Algorithms,\" Int. J. Adv. Res. Comput. Commun. Eng., vol. 4, no. 6, pp. 446 - 452, 2015.","title":"Referensi"}]}